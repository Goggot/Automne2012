package model.views;

import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 18 11:26:23 EST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeptViewRowImpl
  extends ViewRowImpl
{

  public static final int ENTITY_DEPT = 0;

  /**
   * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
   */
  public enum AttributesEnum
  {
    Nodept
    {
      public Object get(DeptViewRowImpl obj)
      {
        return obj.getNodept();
      }

      public void put(DeptViewRowImpl obj, Object value)
      {
        obj.setNodept((Integer)value);
      }
    }
    ,
    Nomd
    {
      public Object get(DeptViewRowImpl obj)
      {
        return obj.getNomd();
      }

      public void put(DeptViewRowImpl obj, Object value)
      {
        obj.setNomd((String)value);
      }
    }
    ,
    Ville
    {
      public Object get(DeptViewRowImpl obj)
      {
        return obj.getVille();
      }

      public void put(DeptViewRowImpl obj, Object value)
      {
        obj.setVille((String)value);
      }
    }
    ,
    EmpView
    {
      public Object get(DeptViewRowImpl obj)
      {
        return obj.getEmpView();
      }

      public void put(DeptViewRowImpl obj, Object value)
      {
        obj.setAttributeInternal(index(), value);
      }
    }
    ;
    private static AttributesEnum[] vals = null;
    private static int firstIndex = 0;

    public abstract Object get(DeptViewRowImpl object);

    public abstract void put(DeptViewRowImpl object, Object value);

    public int index()
    {
      return AttributesEnum.firstIndex() + ordinal();
    }

    public static int firstIndex()
    {
      return firstIndex;
    }

    public static int count()
    {
      return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
    }

    public static AttributesEnum[] staticValues()
    {
      if (vals == null)
      {
        vals = AttributesEnum.values();
      }
      return vals;
    }
  }

  public static final int NODEPT = AttributesEnum.Nodept.index();
  public static final int NOMD = AttributesEnum.Nomd.index();
  public static final int VILLE = AttributesEnum.Ville.index();
  public static final int EMPVIEW = AttributesEnum.EmpView.index();

  /**
   * This is the default constructor (do not remove).
   */
  public DeptViewRowImpl()
  {
  }

  /**
   * Gets Dept entity object.
   * @return the Dept
   */
  public EntityImpl getDept()
  {
    return (EntityImpl) getEntity(ENTITY_DEPT);
  }

  /**
   * Gets the attribute value for NODEPT using the alias name Nodept.
   * @return the NODEPT
   */
  public Integer getNodept()
  {
    return (Integer) getAttributeInternal(NODEPT);
  }

  /**
   * Sets <code>value</code> as attribute value for NODEPT using the alias name Nodept.
   * @param value value to set the NODEPT
   */
  public void setNodept(Integer value)
  {
    setAttributeInternal(NODEPT, value);
  }

  /**
   * Gets the attribute value for NOMD using the alias name Nomd.
   * @return the NOMD
   */
  public String getNomd()
  {
    return (String) getAttributeInternal(NOMD);
  }

  /**
   * Sets <code>value</code> as attribute value for NOMD using the alias name Nomd.
   * @param value value to set the NOMD
   */
  public void setNomd(String value)
  {
    setAttributeInternal(NOMD, value);
  }

  /**
   * Gets the attribute value for VILLE using the alias name Ville.
   * @return the VILLE
   */
  public String getVille()
  {
    return (String) getAttributeInternal(VILLE);
  }

  /**
   * Sets <code>value</code> as attribute value for VILLE using the alias name Ville.
   * @param value value to set the VILLE
   */
  public void setVille(String value)
  {
    setAttributeInternal(VILLE, value);
  }

  /**
   * Gets the associated <code>RowIterator</code> using master-detail link EmpView.
   */
  public RowIterator getEmpView()
  {
    return (RowIterator) getAttributeInternal(EMPVIEW);
  }

  /**
   * getAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param attrDef the attribute

   * @return the attribute value
   * @throws Exception
   */
  protected Object getAttrInvokeAccessor(int index,
                                         AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
    }
    return super.getAttrInvokeAccessor(index, attrDef);
  }

  /**
   * setAttrInvokeAccessor: generated method. Do not modify.
   * @param index the index identifying the attribute
   * @param value the value to assign to the attribute
   * @param attrDef the attribute

   * @throws Exception
   */
  protected void setAttrInvokeAccessor(int index, Object value,
                                       AttributeDefImpl attrDef)
    throws Exception
  {
    if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count()))
    {
      AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
      return;
    }
    super.setAttrInvokeAccessor(index, value, attrDef);
  }
}
